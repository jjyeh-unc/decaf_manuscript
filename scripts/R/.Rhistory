break.time.by = 6,
title = "",
#subtitle = textPrt,
conf.int = F,
risk.table = T,
risk.table.height = 0.35,
surv.median.line = "hv",
size = 0.7, censor.size=5,
palette = paletteer::paletteer_d("ggthemes::excel_Headlines")[c(2,5,3,1)],
legend.title="ACCEPT (Salmon_Refseq)",
legend.labs=c("G/A:myCAF","G/A:iCAF","G:myCAF","G:iCAF"), # legend
xlab = "", ylab="Survival probability", xlim = c(0,30),
pval = T, pval.size = 9, pval.coord = c(22,0.75),  # p-values
font.main = c(23, "plain", "black"),
font.legend = c(19, "plain"),
font.x = c(23, "plain", "black"),
font.y = c(23, "plain", "black"),
font.tickslab = c(23, "plain", "black") ) +
guides(colour = guide_legend(nrow = 2))
ggsurv$table <- ggrisktable(km_fit,
data = survDatObj,
break.time.by = 6,
color = "strata",
palette = paletteer::paletteer_d("ggthemes::excel_Headlines")[c(2,5,3,1)],
y.text = F,
fontsize = 8,
xlab = "Time (months)", ylab = "", xlim = c(0,30),
tables.theme = theme_survminer(font.main = 23, font.tickslab = 23, font.x = 23))
print(ggsurv)
#  ----------------------------------------------------------------------
s="Rash"
survDatTmp <- survDat[which(survDat$study==s & survDat$arm_all != "No_further"),]
factorList <- levels(factor(survDatTmp$arm_all))
survDatObj <- survDatTmp
survDatObj$arm_subtype <- paste(survDatObj$arm_all,
survDatObj[,"DeCAF"],
sep = "_")
survDatObj$arm_subtype <- factor(survDatObj$arm_subtype,
levels = c("Gemcitabine/Erlotinib_myCAF","Gemcitabine/Erlotinib_iCAF",
"FOLFIRINOX_myCAF","FOLFIRINOX_iCAF"))
names(survDatObj)[which(names(survDatObj) %in% "arm_subtype")] <- "obj"
km_fit <- survfit(Surv(survDatObj[,"os_time"], survDatObj[, "os"]) ~ obj, data = survDatObj, type = "kaplan-meier")
df <- data.frame(surv_median(km_fit))
textTmp <- list()
for (i in 1:nrow(df)) {
textTmp[[i]] <- paste(gsub("obj=","",df$strata[i]), ":",
round(df$median[i],2)," (",
round(df$lower[i],2),",",
round(df$upper[i],2),")",sep="")
}
textPrt <- as.character(paste(unlist(textTmp), sep="", collapse="\n"))
ggsurv <- ggsurvplot(km_fit,
data = survDatObj,
break.time.by = 6,
title = "",
#subtitle = textPrt,
conf.int = F,
risk.table = T,
risk.table.height = 0.35,
surv.median.line = "hv",
size = 0.7, censor.size=5,
palette = paletteer::paletteer_d("ggthemes::excel_Headlines")[c(2,5,3,1)],
#lty = c(1,2,1,2),
legend.title="RASH (Salmon_Refseq)",
legend.labs=c("G/E:myCAF","G/E:iCAF","FFX:myCAF","FFX:iCAF"), # legend
xlab = "", ylab="Survival probability", xlim = c(0,30),
pval = T, pval.size = 9, pval.coord = c(22,0.75),  # p-values
font.main = c(23, "plain", "black"),
font.legend = c(19, "plain"),
font.x = c(23, "plain", "black"),
font.y = c(23, "plain", "black"),
font.tickslab = c(23, "plain", "black"), ) +
guides(colour = guide_legend(nrow = 2))
ggsurv$table <- ggrisktable(km_fit,
data = survDatObj,
break.time.by = 6,
color = "strata",
palette = paletteer::paletteer_d("ggthemes::excel_Headlines")[c(2,5,3,1)],
y.text = F,
fontsize = 8,
xlab = "Time (months)", ylab = "", xlim = c(0,30),
tables.theme = theme_survminer(font.main = 23, font.tickslab = 23, font.x = 23))
print(ggsurv)
survDat <- dataSet$clinicalDat_Parsed[1:155, ]
### RASH
datTmp <- clinicalDat[which(clinicalDat$arm_all %in% c("Gemcitabine/Erlotinib","FOLFIRINOX") ),
c("arm_all","resp3","PurIST","DeCAF")]
clinicalDat <- dataSet$clinicalDat_Parsed[1:155, ]
### RASH
datTmp <- clinicalDat[which(clinicalDat$arm_all %in% c("Gemcitabine/Erlotinib","FOLFIRINOX") ),
c("arm_all","resp3","PurIST","DeCAF")]
datTmp$arm_all <- droplevels(datTmp$arm_all)
table(datTmp[datTmp$PurIST=="myCAF",c("arm_all","resp3")])
fisher.test(table(datTmp1[,c("arm_all","resp3")]))
table(datTmp[datTmp$DeCAF=="myCAF",c("arm_all","resp3")])
tmpTable <- table(datTmp[datTmp$DeCAF=="myCAF",c("arm_all","resp3")])
fisher.test(tmpTable)
rm(list=ls())
# set dir
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
############################################################
#################### Functions and libraries
# load libraries
library(survival)
library(survminer)
library(gtable)
library(gridExtra)
library(grid)
library(gplots)
library(openxlsx)
#library(coin)
#library(MASS)
#library(splitstackshape)
#library(reshape)
#library(mclust)
#library(riverplot)
#library(Rmisc)
library(tidyverse)
library(tidytidbits)
library(survivalAnalysis)
# load functions
file.sources <- list.files("../R/R/",pattern="*.R")
file.sources <- paste("../R/R/", file.sources, sep="")
sapply(file.sources, source)
# load subtype info
### This is a combined subtype object with
### subtypeColList, subtypeGeneList, subtypeList and schemaList
load("../data/cmbSubtypes.RData")
print("Subtype schemas available for use:")
print(schemaList)
# load dataset
Load_cafSubtype <- function(rDataName) {
survDat <- readRDS(paste("../data_asis_refseq_star_rsem/",rDataName,".caf_subtype.rds",sep=""))
return(survDat)
}
Load_survDat <- function(rDataName) {
survDat <- readRDS(paste("../data_asis_refseq_star_rsem/",rDataName,".survival_data.rds",sep=""))
return(survDat)
}
Plot_survival <- function(survDat, km, mainLabel){
splots <- list()
# SCISSORS_CAF_K2_top25.K2
if(length(unique(survDat$SCISSORS_CAF_K2_top25.K2)) >= 2) {
p = coxph(km ~ SCISSORS_CAF_K2_top25.K2, data = survDat)
bic = round(BIC(p),3)
hr <- round(summary(p)$coefficients[2],3)
km_fit <- survfit(km ~ SCISSORS_CAF_K2_top25.K2, data = survDat, type = "kaplan-meier")
splots[[1]] <- ggsurvplot(km_fit, conf.int = F, pval = T,
legend.title="",break.time.by = 12,
legend.labs=c("iCAF","myCAF"),
palette = c("coral","darkgreen"),
xlab = "Time (months)", risk.table = T,
title = paste(mainLabel," - SCISSORS K2 (BIC=",
bic,")",
"\nm vs i HR=",hr,sep=""))
}
# Elyada_CAF
if(length(unique(survDat$Elyada_CAF)) >= 2) {
p = coxph(km ~ Elyada_CAF, data = survDat)
bic = round(BIC(p),3)
hr <- round(summary(p)$coefficients[2],3)
km_fit <- survfit(km ~ Elyada_CAF, data = survDat, type = "kaplan-meier")
splots[[2]] <- ggsurvplot(km_fit, conf.int = F, pval = T,
legend.title="",break.time.by = 12,
legend.labs=c("iCAF","myCAF"),
palette = c("coral","darkgreen"),
xlab = "Time (months)", risk.table = T,
title = paste(mainLabel," - Elyada_CAF (BIC=",
bic,")",
"\nm vs i HR=",hr,sep=""))
}
# MS
if(length(unique(survDat$MS)) >= 2) {
p = coxph(km ~ MS, data = survDat)
bic = round(BIC(p),3)
hr <- round(1/summary(p)$coefficients[2],3)
km_fit <- survfit(km ~ MS, data = survDat, type = "kaplan-meier")
splots[[3]] <- ggsurvplot(km_fit, conf.int = F, pval = T,
legend.title="",break.time.by = 12,
legend.labs=c("Activated","Normal"),
palette = c("brown","skyblue"),
xlab = "Time (months)", risk.table = T,
title = paste(mainLabel," - MS (BIC=",
bic,")",
"\nA vs N HR=",hr,sep=""))
}
# Maurer
if(length(unique(survDat$Maurer)) >= 2) {
p = coxph(km ~ Maurer, data = survDat)
bic = round(BIC(p),3)
hr <- round(1/summary(p)$coefficients[2],3)
km_fit <- survfit(km ~ Maurer, data = survDat, type = "kaplan-meier")
splots[[4]] <- ggsurvplot(km_fit, conf.int = F, pval = T,
legend.title="",break.time.by = 12,
legend.labs=c("ECM-rich","Immune-rich"),
palette = c("purple3","forestgreen"),
xlab = "Time (months)", risk.table = T,
title = paste(mainLabel," - Maurer (BIC=",
bic,")",
"\nE vs I HR=",hr,sep=""))
}
arrange_ggsurvplots(splots,
print = TRUE,
ncol = 1, nrow = 1)
}
rDataName <- Aguirre
rDataName <- "Aguirre"
cafSubtype <- Load_cafSubtype(rDataName)
# call PurISS
dataSet <- readRDS(paste("../data_asis_refseq_star_rsem/",rDataName,".rds",sep=""))
## PurISS
version_PurISS = "final"
dataSet <- Call_PurISS(dataSet, version = version_PurISS)
cafSubtype$Subtype[paste("PurISS", version_PurISS, sep = ".")] <- dataSet$sampInfo[[paste("PurISS", version_PurISS, sep = ".")]]
cafSubtype$Subtype[paste("PurISS_graded", version_PurISS, sep = ".")] <- dataSet$sampInfo[[paste("PurISS_graded", version_PurISS, sep = ".")]]
cafSubtype$Subtype[paste("PurISS.prob", version_PurISS, sep = ".")] <- dataSet$sampInfo[[paste("PurISS.prob", version_PurISS, sep = ".")]]
cafSubtype <- Load_cafSubtype(rDataName)
cafSubtype$Subtype$DeCAF <- dataSet$sampInfo[[paste("PurISS", version_PurISS, sep = ".")]]
cafSubtype$Subtype$DeCAF_graded <- dataSet$sampInfo[[paste("PurISS_graded", version_PurISS, sep = ".")]]
cafSubtype$Subtype$DeCAF.prob <- dataSet$sampInfo[[paste("PurISS.prob", version_PurISS, sep = ".")]]
# parse cafSubtype and survDat
cafSubtype <- cafSubtype$Subtype
survDat <- Load_survDat(rDataName)
survDat <- survDat[,c("sampID","time","event","whitelist")]
survDat$time <- as.numeric(survDat$time)
survDat$event <- as.numeric(survDat$event)
survDat$Dataset <- rDataName
survDat <- cbind(survDat, cafSubtype)
survDat <- survDat[which(survDat$whitelist),]
km <- with(survDat, Surv(time,event))
Plot_survival(survDat, km, rDataName)
source("~/Desktop/CAF_classifier/R_asis_refseq_star_rsem/Analyze_survival_Aguirre.R", echo=TRUE)
t=dataSet$sampInfo
View(t)
# liver only -----------------------------------------------------------------------------------------
dataSet$sampInfo$ccpm_id[dataSet$sampInfo$site %in% "Liver"]
# liver only -----------------------------------------------------------------------------------------
dataSet$sampInfo$ccpm_id[which(dataSet$sampInfo$site %in% "Liver")]
# liver only -----------------------------------------------------------------------------------------
sampLiver <- as.character(dataSet$sampInfo$ccpm_id[which(dataSet$sampInfo$site %in% "Liver")])
View(survDat.all)
which(survDat.all$sampID %in% sampLiver)
idxLiver <- which(survDat.all$sampID %in% sampLiver)
survDat <- survDat.all[idxLiver, ]
source("~/Desktop/CAF_classifier/R_asis_refseq_star_rsem/Analyze_survival_Aguirre.R", echo=TRUE)
rm(list=ls())
dataSet <- readRDS("yehseq_pdac_pi.decaf_freeze.rds")
sampKey <- read.xlsx("../proteomics/SampleKey.xlsx")
View(sampKey)
uniqID <- paste0(sampKey$X6,":",sampKey$X7)
dataSet$sampInfo$uniqID %in% uniqID
which(dataSet$sampInfo$uniqID %in% uniqID)
goodSamp <- match(uniqID, dataSet$sampInfo$uniqID)
sampKey$ACTA2_RNA <- dataSet$ex["ACTA2",match(uniqID, dataSet$sampInfo$uniqID)]
idxTmp <- match(uniqID, dataSet$sampInfo$uniqID)
t <- dataSet$ex[c("ACTA2"),idxTmp[which(!is.na(idxTmp))]]
View(t)
rm(list=ls9)
rm(list=ls())
# load libraries
library(survival)
library(survminer)
library(gtable)
library(gridExtra)
library(grid)
library(gplots)
library(openxlsx)
#library(coin)
#library(MASS)
#library(splitstackshape)
#library(reshape)
#library(mclust)
#library(riverplot)
#library(Rmisc)
library(tidyverse)
library(tidytidbits)
library(survivalAnalysis)
# load functions
file.sources <- list.files("../R/R/",pattern="*.R")
file.sources <- paste("../R/R/", file.sources, sep="")
sapply(file.sources, source)
# load subtype info
### This is a combined subtype object with
### subtypeColList, subtypeGeneList, subtypeList and schemaList
load("../data/cmbSubtypes.RData")
print("Subtype schemas available for use:")
print(schemaList)
# load data
load("Yeh_Salmon_German_20221018.RData")
dataSet <- Yeh_Salmon_German
sampSub <- 1:nrow(dataSet$sampInfo)
studyList <- c("ACCEPT","RASH")
studyColList <- c("#91d1c2","#b09c8f")
armList <- c("Gemcitabine/Afatinib","Gemcitabine","No_further","Gemcitabine/Erlotinib","FOLFIRINOX")
armColList <- c("#9f79ee","#9acd32","#ffda1f","#e36ca3","#52BBD3")
# call DeCAF
version_PurISS = "final"
dataSet <- Call_PurISS(dataSet, version = version_PurISS)
dataSet$clinicalDat_Parsed$DeCAF <- dataSet$sampInfo$PurISS.final[match(dataSet$clinicalDat_Parsed$pat_id_new, dataSet$sampInfo$patientID)]
dataSet$clinicalDat_Parsed$DeCAF_graded <- dataSet$sampInfo$PurISS_graded.final[match(dataSet$clinicalDat_Parsed$pat_id_new, dataSet$sampInfo$patientID)]
dataSet$clinicalDat_Parsed$DeCAF.prob <- dataSet$sampInfo$PurISS.prob.final[match(dataSet$clinicalDat_Parsed$pat_id_new, dataSet$sampInfo$patientID)]
survDat <- dataSet$clinicalDat_Parsed[1:155, ]
#  ----------------------------------------------------------------------
arm = "Gemcitabine/Afatinib"
survDatTmp <- survDat[which(survDat$arm_all==arm),]
factorList <- levels(factor(survDatTmp$arm_all))
survDatObj <- survDatTmp
names(survDatObj)[which(names(survDatObj) %in% "DeCAF")] <- "obj"
km_fit <- survfit(Surv(survDatObj[,"os_time"], survDatObj[, "os"]) ~ obj, data = survDatObj, type = "kaplan-meier")
df <- data.frame(surv_median(km_fit))
textTmp <- list()
for (i in 1:nrow(df)) {
textTmp[[i]] <- paste(gsub("obj=","",df$strata[i]), ":",
round(df$median[i],2)," (",
round(df$lower[i],2),",",
round(df$upper[i],2),")",sep="")
}
textPrt <- as.character(paste(unlist(textTmp), sep="", collapse="\n"))
ggsurv <- ggsurvplot(km_fit,
data = survDatObj,
break.time.by = 6,
title = "",
#subtitle = textPrt,
conf.int = F,
risk.table = T,
risk.table.height = 0.35,
surv.median.line = "hv",
size = 0.7, censor.size=5,
#palette = paletteer::paletteer_d("ggthemes::excel_Headlines")[c(2,5,3,1)],
legend.title="G/A (All)",
#legend.labs=c("G/A:myCAF","G/A:iCAF","G:myCAF","G:iCAF"), # legend
xlab = "", ylab="Survival probability", xlim = c(0,30),
pval = T, pval.size = 9, pval.coord = c(22,0.75),  # p-values
font.main = c(23, "plain", "black"),
font.legend = c(19, "plain"),
font.x = c(23, "plain", "black"),
font.y = c(23, "plain", "black"),
font.tickslab = c(23, "plain", "black") ) +
guides(colour = guide_legend(nrow = 2))
ggsurv$table <- ggrisktable(km_fit,
data = survDatObj,
break.time.by = 6,
#color = "strata",
#palette = paletteer::paletteer_d("ggthemes::excel_Headlines")[c(2,5,3,1)],
y.text = F,
fontsize = 8,
xlab = "Time (months)", ylab = "", xlim = c(0,30),
tables.theme = theme_survminer(font.main = 23, font.tickslab = 23, font.x = 23))
print(ggsurv)
#  ----------------------------------------------------------------------
arm = "Gemcitabine/Erlotinib"
survDatTmp <- survDat[which(survDat$arm_all==arm),]
factorList <- levels(factor(survDatTmp$arm_all))
survDatObj <- survDatTmp
names(survDatObj)[which(names(survDatObj) %in% "DeCAF")] <- "obj"
km_fit <- survfit(Surv(survDatObj[,"os_time"], survDatObj[, "os"]) ~ obj, data = survDatObj, type = "kaplan-meier")
df <- data.frame(surv_median(km_fit))
textTmp <- list()
for (i in 1:nrow(df)) {
textTmp[[i]] <- paste(gsub("obj=","",df$strata[i]), ":",
round(df$median[i],2)," (",
round(df$lower[i],2),",",
round(df$upper[i],2),")",sep="")
}
textPrt <- as.character(paste(unlist(textTmp), sep="", collapse="\n"))
dataSet <- readRDS("../data_asis_refseq_star_rsem/TCGA_PAAD.rds")
sampInfo=dataSet$sampInfo
View(sampInfo)
names(sampInfo)
dataSet <- readRDS("../YehSeq_Pi/yehseq_pdac_pi.decaf_freeze.rds")
sampInfo <- dataSet$sampInfo
View(sampInfo)
sampInfo[55,]
sampInfo[57,]
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
load("../classifiers/final_classifier.Rdata")
load("../../classifiers/final_classifier.Rdata")
classifier = final_classifier$classifier2
## Extract Classifier
fit = classifier$fit
classifier$TSPs
classifier$fit$beta
classifier$fit$lambda
classifier$fit$iter
classifier$fit$penalty
classifier$fit$gamma
classifier$fit$alpha
classifier$fit$X
classifier$labels
classifier$name
classifier$fit$convex.min
classifier$fit$loss
classifier$fit$penalty.factor
classifier$fit$n
classifier$fit$pe
classifier$fit$beta
classifier$fit$beta
classifier$fit$iter
classifier$fit$lambda
classifier$fit$penalty
classifier$fit$family
classifier$fit$gamma
classifier$fit$alpha
classifier$fit$convex.min
classifier$fit$loss
classifier$fit$penalty.factor
classifier$fit$n
classifier$fit$X
classifier$fit$y
classifier$fit$pe
library(openxlsx)
library(ggplot2)
library(stringr)
#library(samr)
#library(sva)
#library(Biobase)
library(matrixStats)
#library(base)
library(RColorBrewer)
library(ConsensusClusterPlus)
# load PurIST
load("../R/PurIST/fitteds_public_2019-02-12.Rdata")
source("../R/PurIST/functions.R")
# load subtype info
### This is a combined subtype object with
### subtypeColList, subtypeGeneList, subtypeList and schemaList
load("../data/cmbSubtypes.RData")
print("Subtype schemas available for use:")
print(schemaList)
# load functions
file.sources <- list.files("../R/R/",pattern="*.R")
file.sources <- paste("../R/R/", file.sources, sep="")
sapply(file.sources, source)
# calculate stats
cal_stats <- function(vector) {
output <- rep("", 4)
v1 <- vector[idxP]
v1 <- as.numeric(v1[which(!is.na(v1))])
v2 <- vector[idxR]
v2 <- as.numeric(v2[which(!is.na(v2))])
if(length(v1) > 3 & length(v2) > 3) {
output[1] <- round(median(v1),3)
output[2] <- round(median(v2),3)
output[3] <- round(log2(median(v1)/median(v2)),3)
wilTest <- wilcox.test(v1, v2)
output[4] <- round(wilTest$p.value,3)
}
return(output)
}
# calculate cor
cal_rna_protein_cor <- function(vector) {
output <- rep("", 4)
v1 <- vector[idxP]
idxFlt.v1 <- which(!is.na(v1))
v1 <- as.numeric(v1[idxFlt.v1])
v2 <- vector[idxR]
idxFlt.v2 <- which(!is.na(v2))
v2 <- as.numeric(v2[idxFlt.v2])
v3 <- vector[135+idxP]
v3 <- as.numeric(v3[idxFlt.v1]) # filter mssing in protein
v4 <- vector[135+idxR]
v4 <- as.numeric(v4[idxFlt.v2])
if(length(v1) > 3) {
corTest <- cor.test(as.numeric(v1), as.numeric(v3), method = "spearman", exact=FALSE)
output[1] <- corTest$estimate
output[2] <- corTest$p.value
}
if(length(v2) > 3) {
corTest <- cor.test(as.numeric(v2), as.numeric(v4), method = "spearman", exact=FALSE)
output[3] <- corTest$estimate
output[4] <- corTest$p.value
}
return(output)
}
# calculate cor
cal_meth_protein_cor <- function(vector) {
output <- rep("", 4)
v1 <- vector[idxP.meth]
idxFlt.v1 <- which(!is.na(v1))
v1 <- as.numeric(v1[idxFlt.v1])
v2 <- vector[idxR.meth]
idxFlt.v2 <- which(!is.na(v2))
v2 <- as.numeric(v2[idxFlt.v2])
v3 <- vector[96+idxP]
v3 <- as.numeric(v3[idxFlt.v1]) # filter mssing in protein
v4 <- vector[96+idxR]
v4 <- as.numeric(v4[idxFlt.v2])
if(length(v1) > 3) {
corTest <- cor.test(as.numeric(v1), as.numeric(v3), method = "spearman", exact=FALSE)
output[1] <- corTest$estimate
output[2] <- corTest$p.value
}
if(length(v2) > 3) {
corTest <- cor.test(as.numeric(v2), as.numeric(v4), method = "spearman", exact=FALSE)
output[3] <- corTest$estimate
output[4] <- corTest$p.value
}
return(output)
}
datRNA <- readRDS("../data_asis_refseq_star_rsem/CPTAC.rds")
sampSub <- which(datRNA$sampInfo$histology_diagnosis %in% "PDAC")
datRNA$ex <- datRNA$ex[,sampSub]
datRNA$sampInfo <- datRNA$sampInfo[sampSub,]
datRNA.subtype <- readRDS("../data_asis_refseq_star_rsem/CPTAC.caf_subtype.rds")
datRNA$subtypeCall <- datRNA.subtype$Subtype[sampSub, ]
datRNA <- Call_PurISS(datRNA, "final")
idxP <- which(datRNA$sampInfo$PurISS.final %in% "myCAF")
idxR <- which(datRNA$sampInfo$PurISS.final %in% "iCAF")
datRNA$subtypeCall$DeCAF <- datRNA$sampInfo$PurISS.final
datRNA$subtypeCall$DeCAF[datRNA$subtypeCall$DeCAF %in% "myCAF"] <- "permCAF"
datRNA$subtypeCall$DeCAF[datRNA$subtypeCall$DeCAF %in% "iCAF"] <- "restCAF"
saveRDS(datRNA, "CPTAC_DeCAF.rds")
